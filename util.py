#!/usr/bin/env python3

import sys
from anki.collection import Collection

sections = [
    "Chapter 1",
    "Chapter 2",
    "Chapter 3",
    "Chapter 4",
    "Chapter 5",
    "Chapter 6",
    "Chapter 7",
    "Chapter 8",
    "Chapter 9",
    "Chapter 10",
    "Chapter 11",
    "Chapter 12",
    "Chapter 13",
    "Chapter 14",
    "Chapter 15",
    "Chapter 16",
    "Chapter 17",
    "Chapter 18",
    "Chapter 19",
    "Chapter 20",
    "Chapter 21",
    "Chapter 22",
    "Chapter 23",
    "Chapter 24",
    "Chapter 25",
    "Chapter 26",
    "Chapter 27",
    "Chapter 28",
    "Chapter 29",
    "Chapter 30",
    "Chapter 31",
    "Chapter 32",
    "Chapter 33",
    "Chapter 34",
    "Chapter 35",
    "Chapter 36",
    "Chapter 37",
    "Chapter 38",
    "Chapter 39",
    "Chapter 40",
    "Chapter 41",
    "Chapter 42",
    "Chapter 43",
    "Chapter 44",
    "Chapter 45",
    # "(empty section name)",  # This was enabled during testing only,
                               # back when some cards still had empty
                               # Section fields.
]

col = Collection("apkg/collection.anki21")

section_map = {}

for section in sections:
    section_map[section] = []

for note_id in col.find_notes(""):
    note = col.get_note(note_id)
    try:
        section_map[note["Section"]].append(note)
    except KeyError:
        print(f"Card has section name {note['Section']}, but this section isn't in the sections list!", file=sys.stderr)
        section_map["(empty section name)"].append(note)
        # sys.exit()

# By default, the cards are ordered by the note ID, rather than the "New #"
# that appears in the Anki browse window.  So here we get the card that would
# be generated by the note, find its "New #", and order by that number. This
# way, the website's ordering of cards will match that shown in the Anki deck.
for section in sections:
    section_map[section].sort(key=lambda note: note.cards()[0].due)

def slugify(s):
    '''
    "Slugify" the string s as follows: keep only the characters that are
    alphabetic or numerical, and group them together; all other characters are
    replaced by "-" and squeezed together.
    '''
    s = s.lower()
    s = "".join(c if (c.isalpha() or c.isdigit()) else "-" for c in s)
    s = "-".join(filter(bool, s.split("-")))
    return s

def navbar(levels, optional=None):
    optional_nav_tags = ""
    if optional:
        for text, href in optional:
            optional_nav_tags += f'&middot;&nbsp;<a href="{href}">{text}</a>'
    return (f"""
        <nav>
            <a href="{'../' * levels}">Back to home</a>
            {optional_nav_tags}
        </nav>
    """)
